# Generated by Django 5.1.6 on 2025-05-21 08:53

from django.db import migrations

def convert_food_entries(apps, schema_editor):
    FoodEntry = apps.get_model('users', 'FoodEntry')
    FoodItem = apps.get_model('users', 'FoodItem')
    
    # Group entries by name to create unique FoodItems
    entries_by_name = {}
    for entry in FoodEntry.objects.all():
        if entry.name not in entries_by_name:
            entries_by_name[entry.name] = []
        entries_by_name[entry.name].append(entry)
    
    # Create FoodItems and update FoodEntries
    for name, entries in entries_by_name.items():
        if not entries:
            continue
            
        # Use the first entry's values for the FoodItem
        first_entry = entries[0]
        food_item = FoodItem.objects.create(
            name=name,
            calories_per_100g=first_entry.calories or 0,
            carbs_per_100g=first_entry.carbs or 0,
            fat_per_100g=first_entry.fat or 0,
            protein_per_100g=first_entry.protein or 0
        )
        
        # Update all entries with this name to use the new FoodItem
        for entry in entries:
            entry.food_item = food_item
            entry.save()

def reverse_convert_food_entries(apps, schema_editor):
    # No need for reverse migration as we're keeping the old fields
    pass

class Migration(migrations.Migration):

    dependencies = [
        ('users', '0008_fooditem_remove_foodentry_calories_and_more'),
    ]

    operations = [
        migrations.RunPython(convert_food_entries, reverse_convert_food_entries),
    ]
